Line    | Lexeme         | Token Type
--------------------------------------------------
1       | /^             | SINGLE_LINE_COMMENT_START
1       |  Utility functions| SINGLE_LINE_COMMENT_CONTENT
3       | /^             | SINGLE_LINE_COMMENT_START
3       |  Calculate maximum of two values| SINGLE_LINE_COMMENT_CONTENT
4       | Imw            | INTEGER
4       | max            | IDENTIFIER
4       | (              | BRACE
4       | Imw            | INTEGER
4       | a              | IDENTIFIER
4       | ,              | COMMA
4       | Imw            | INTEGER
4       | b              | IDENTIFIER
4       | )              | BRACE
4       | {              | BRACE
5       | IfTrue         | CONDITION
5       | (              | BRACE
5       | a              | IDENTIFIER
5       | >              | RELATIONAL_OP
5       | b              | IDENTIFIER
5       | )              | BRACE
5       | {              | BRACE
6       | Turnback       | RETURN
6       | a              | IDENTIFIER
6       | ;              | SEMICOLON
7       | }              | BRACE
7       | Otherwise      | CONDITION
7       | {              | BRACE
8       | Turnback       | RETURN
8       | b              | IDENTIFIER
8       | ;              | SEMICOLON
9       | }              | BRACE
10      | }              | BRACE
12      | /^             | SINGLE_LINE_COMMENT_START
12      |  Calculate minimum of two values| SINGLE_LINE_COMMENT_CONTENT
13      | Imw            | INTEGER
13      | min            | IDENTIFIER
13      | (              | BRACE
13      | Imw            | INTEGER
13      | a              | IDENTIFIER
13      | ,              | COMMA
13      | Imw            | INTEGER
13      | b              | IDENTIFIER
13      | )              | BRACE
13      | {              | BRACE
14      | IfTrue         | CONDITION
14      | (              | BRACE
14      | a              | IDENTIFIER
14      | <              | RELATIONAL_OP
14      | b              | IDENTIFIER
14      | )              | BRACE
14      | {              | BRACE
15      | Turnback       | RETURN
15      | a              | IDENTIFIER
15      | ;              | SEMICOLON
16      | }              | BRACE
16      | Otherwise      | CONDITION
16      | {              | BRACE
17      | Turnback       | RETURN
17      | b              | IDENTIFIER
17      | ;              | SEMICOLON
18      | }              | BRACE
19      | }              | BRACE
21      | /^             | SINGLE_LINE_COMMENT_START
21      |  Check if number is even| SINGLE_LINE_COMMENT_CONTENT
22      | Imw            | INTEGER
22      | isEven         | IDENTIFIER
22      | (              | BRACE
22      | Imw            | INTEGER
22      | num            | IDENTIFIER
22      | )              | BRACE
22      | {              | BRACE
23      | IfTrue         | CONDITION
23      | (              | BRACE
23      | num            | IDENTIFIER
23      | +              | ADDOP
23      | 2              | CONSTANT
23      | ==             | RELATIONAL_OP
23      | 0              | CONSTANT
23      | )              | BRACE
23      | {              | BRACE
24      | Turnback       | RETURN
24      | 1              | CONSTANT
24      | ;              | SEMICOLON
25      | }              | BRACE
25      | Otherwise      | CONDITION
25      | {              | BRACE
26      | Turnback       | RETURN
26      | 0              | CONSTANT
26      | ;              | SEMICOLON
27      | }              | BRACE
28      | }              | BRACE
30      | /^             | SINGLE_LINE_COMMENT_START
30      |  Calculate factorial of a number| SINGLE_LINE_COMMENT_CONTENT
31      | Imw            | INTEGER
31      | factorial      | IDENTIFIER
31      | (              | BRACE
31      | Imw            | INTEGER
31      | n              | IDENTIFIER
31      | )              | BRACE
31      | {              | BRACE
32      | IfTrue         | CONDITION
32      | (              | BRACE
32      | n              | IDENTIFIER
32      | <=             | RELATIONAL_OP
32      | 1              | CONSTANT
32      | )              | BRACE
32      | {              | BRACE
33      | Turnback       | RETURN
33      | 1              | CONSTANT
33      | ;              | SEMICOLON
34      | }              | BRACE
34      | Otherwise      | CONDITION
34      | {              | BRACE
35      | Turnback       | RETURN
35      | n              | IDENTIFIER
35      | *              | MULOP
35      | factorial      | IDENTIFIER
35      | (              | BRACE
35      | n              | IDENTIFIER
35      | -              | ADDOP
35      | 1              | CONSTANT
35      | )              | BRACE
35      | ;              | SEMICOLON
36      | }              | BRACE
37      | }              | BRACE
39      | /^             | SINGLE_LINE_COMMENT_START
39      |  String copy function| SINGLE_LINE_COMMENT_CONTENT
40      | NOReturn       | VOID
40      | stringCopy     | IDENTIFIER
40      | (              | BRACE
40      | Series         | STRING
40      | dest           | IDENTIFIER
40      | ,              | COMMA
40      | Series         | STRING
40      | src            | IDENTIFIER
40      | )              | BRACE
40      | {              | BRACE
41      | /@             | COMMENT_START
41      |  This would need builtin string handling
    Implementation would depend on the runtime | COMMENT_CONTENT
42      | @/             | COMMENT_END
43      | }              | BRACE
45      | /^             | SINGLE_LINE_COMMENT_START
45      |  Utility structure for mathematical operations| SINGLE_LINE_COMMENT_CONTENT
46      | Loli           | STRUCT
46      | MathUtils      | IDENTIFIER
46      | {              | BRACE
47      | IMwf           | FLOAT
47      | pi             | IDENTIFIER
47      | ;              | SEMICOLON
48      | IMwf           | FLOAT
48      | e              | IDENTIFIER
48      | ;              | SEMICOLON
49      | }              | BRACE
49      | ;              | SEMICOLON
51      | /^             | SINGLE_LINE_COMMENT_START
51      |  Initialize math constants| SINGLE_LINE_COMMENT_CONTENT
52      | NOReturn       | VOID
52      | initMathUtils  | IDENTIFIER
52      | (              | BRACE
52      | Loli           | STRUCT
52      | utils          | IDENTIFIER
52      | )              | BRACE
52      | {              | BRACE
53      | utils          | IDENTIFIER
53      | ->             | ACCESS_OP
53      | pi             | IDENTIFIER
53      | =              | ASSIGNMENT_OP
53      | 3.14159        | CONSTANT
53      | ;              | SEMICOLON
54      | utils          | IDENTIFIER
54      | ->             | ACCESS_OP
54      | e              | IDENTIFIER
54      | =              | ASSIGNMENT_OP
54      | 2.71828        | CONSTANT
54      | ;              | SEMICOLON
55      | }              | BRACE
1       | /@             | COMMENT_START
1       |  
   Test file for Project#3 compiler
   This file demonstrates basic language features 
| COMMENT_CONTENT
4       | @/             | COMMENT_END
6       | /^             | SINGLE_LINE_COMMENT_START
6       |  Include helper functions | SINGLE_LINE_COMMENT_CONTENT
7       | include        | INCLUSION
7       | ".\tests\toinclude.txt"| STRING_LITERAL
7       | ;              | SEMICOLON
9       | /^             | SINGLE_LINE_COMMENT_START
9       |  Type declarations and variable declarations| SINGLE_LINE_COMMENT_CONTENT
10      | Imw            | INTEGER
10      | globalVar      | IDENTIFIER
10      | ;              | SEMICOLON
11      | SIMw           | SINTEGER
11      | negativeNum    | IDENTIFIER
11      | ;              | SEMICOLON
12      | Chj            | CHARACTER
12      | letter         | IDENTIFIER
12      | ;              | SEMICOLON
13      | Series         | STRING
13      | message        | IDENTIFIER
13      | ;              | SEMICOLON
14      | IMwf           | FLOAT
14      | pi             | IDENTIFIER
14      | ;              | SEMICOLON
15      | SIMwf          | SFLOAT
15      | negativeFloat  | IDENTIFIER
15      | ;              | SEMICOLON
17      | /^             | SINGLE_LINE_COMMENT_START
17      |  Structure definition| SINGLE_LINE_COMMENT_CONTENT
18      | Loli           | STRUCT
18      | Person         | IDENTIFIER
18      | {              | BRACE
19      | Imw            | INTEGER
19      | age            | IDENTIFIER
19      | ;              | SEMICOLON
20      | Series         | STRING
20      | name           | IDENTIFIER
20      | ;              | SEMICOLON
21      | IMwf           | FLOAT
21      | height         | IDENTIFIER
21      | ;              | SEMICOLON
22      | }              | BRACE
22      | ;              | SEMICOLON
24      | /^             | SINGLE_LINE_COMMENT_START
24      |  Function declaration with parameters| SINGLE_LINE_COMMENT_CONTENT
25      | Imw            | INTEGER
25      | add            | IDENTIFIER
25      | (              | BRACE
25      | Imw            | INTEGER
25      | a              | IDENTIFIER
25      | ,              | COMMA
25      | Imw            | INTEGER
25      | b              | IDENTIFIER
25      | )              | BRACE
25      | {              | BRACE
26      | Turnback       | RETURN
26      | a              | IDENTIFIER
26      | +              | ADDOP
26      | b              | IDENTIFIER
26      | ;              | SEMICOLON
27      | }              | BRACE
28      | /^             | SINGLE_LINE_COMMENT_START
28      |  Main function with various statements| SINGLE_LINE_COMMENT_CONTENT
29      | Imw            | INTEGER
29      | main           | IDENTIFIER
29      | (              | BRACE
29      | )              | BRACE
29      | {              | BRACE
30      | /^             | SINGLE_LINE_COMMENT_START
30      |  Variable declarations| SINGLE_LINE_COMMENT_CONTENT
31      | Imw            | INTEGER
31      | x              | IDENTIFIER
31      | ;              | SEMICOLON
32      | IMwf           | FLOAT
32      | result         | IDENTIFIER
32      | ;              | SEMICOLON
33      | Series         | STRING
33      | greeting       | IDENTIFIER
33      | ;              | SEMICOLON
34      | Loli           | STRUCT
34      | Person         | IDENTIFIER
34      | person1        | IDENTIFIER
34      | ;              | SEMICOLON
35      | Imw            | INTEGER
35      | y              | IDENTIFIER
35      | =              | ASSIGNMENT_OP
35      | 20             | CONSTANT
35      | ;              | SEMICOLON
36      | Imw            | INTEGER
36      | z              | IDENTIFIER
36      | =              | ASSIGNMENT_OP
36      | add            | IDENTIFIER
36      | (              | BRACE
36      | x              | IDENTIFIER
36      | ,              | COMMA
36      | y              | IDENTIFIER
36      | )              | BRACE
36      | ;              | SEMICOLON
37      | Imw            | INTEGER
37      | counter        | IDENTIFIER
37      | ;              | SEMICOLON
38      | Imw            | INTEGER
38      | I              | IDENTIFIER
38      | ;              | SEMICOLON
40      | x              | IDENTIFIER
40      | =              | ASSIGNMENT_OP
40      | 10             | CONSTANT
40      | ;              | SEMICOLON
41      | IfTrue         | CONDITION
41      | (              | BRACE
41      | z              | IDENTIFIER
41      | >              | RELATIONAL_OP
41      | 25             | CONSTANT
41      | )              | BRACE
41      | {              | BRACE
42      | result         | IDENTIFIER
42      | =              | ASSIGNMENT_OP
42      | z              | IDENTIFIER
42      | *              | MULOP
42      | 1.5            | CONSTANT
42      | ;              | SEMICOLON
43      | }              | BRACE
43      | Otherwise      | CONDITION
43      | {              | BRACE
44      | result         | IDENTIFIER
44      | =              | ASSIGNMENT_OP
44      | z              | IDENTIFIER
44      | /              | MULOP
44      | 2.0            | CONSTANT
44      | ;              | SEMICOLON
45      | }              | BRACE
46      | counter        | IDENTIFIER
46      | =              | ASSIGNMENT_OP
46      | 0              | CONSTANT
46      | ;              | SEMICOLON
47      | RepeatWhen     | LOOP
47      | (              | BRACE
47      | counter        | IDENTIFIER
47      | <              | RELATIONAL_OP
47      | 5              | CONSTANT
47      | )              | BRACE
47      | {              | BRACE
48      | counter        | IDENTIFIER
48      | =              | ASSIGNMENT_OP
48      | counter        | IDENTIFIER
48      | +              | ADDOP
48      | 1              | CONSTANT
48      | ;              | SEMICOLON
50      | IfTrue         | CONDITION
50      | (              | BRACE
50      | counter        | IDENTIFIER
50      | ==             | RELATIONAL_OP
50      | 3              | CONSTANT
50      | )              | BRACE
50      | {              | BRACE
51      | OutLoop        | BREAK
51      | ;              | SEMICOLON
52      | }              | BRACE
53      | }              | BRACE
55      | Reiterate      | LOOP
55      | (              | BRACE
55      | Imw            | INTEGER
55      | i              | IDENTIFIER
55      | =              | ASSIGNMENT_OP
55      | 0              | CONSTANT
55      | ;              | SEMICOLON
55      | i              | IDENTIFIER
55      | <              | RELATIONAL_OP
55      | 10             | CONSTANT
55      | ;              | SEMICOLON
55      | i              | IDENTIFIER
55      | =              | ASSIGNMENT_OP
55      | i              | IDENTIFIER
55      | +              | ADDOP
55      | 1              | CONSTANT
55      | )              | BRACE
55      | {              | BRACE
56      | IfTrue         | CONDITION
56      | (              | BRACE
56      | greeting       | IDENTIFIER
56      | [              | BRACE
56      | i              | IDENTIFIER
56      | ]              | BRACE
56      | -              | ADDOP
56      | 2              | CONSTANT
56      | ==             | RELATIONAL_OP
56      | 0              | CONSTANT
56      | )              | BRACE
56      | {              | BRACE
57      | Imw            | INTEGER
57      | t              | IDENTIFIER
57      | ;              | SEMICOLON
58      | }              | BRACE
59      | }              | BRACE
61      | person1        | IDENTIFIER
61      | ->             | ACCESS_OP
61      | age            | IDENTIFIER
61      | =              | ASSIGNMENT_OP
61      | 25             | CONSTANT
61      | ;              | SEMICOLON
62      | person1        | IDENTIFIER
62      | ->             | ACCESS_OP
62      | name           | IDENTIFIER
62      | =              | ASSIGNMENT_OP
62      | "John Doe"     | STRING_LITERAL
62      | ;              | SEMICOLON
63      | person1        | IDENTIFIER
63      | ->             | ACCESS_OP
63      | height         | IDENTIFIER
63      | =              | ASSIGNMENT_OP
63      | 175.5          | CONSTANT
63      | ;              | SEMICOLON
65      | Turnback       | RETURN
65      | 0              | CONSTANT
65      | ;              | SEMICOLON
66      | }              | BRACE
66      |                | EOF_TOKEN

Total Number of lexical errors: 0

Parser Results:
--------------------------------------------------
Line : 1 Matched Rule used: Comment
Line : 3 Matched Rule used: Comment
Line : 6 Matched Rule used: jump-stmt
Line : 5 Matched Rule used: compound-stmt
Line : 8 Matched Rule used: jump-stmt
Line : 7 Matched Rule used: compound-stmt
Line : 5 Matched Rule used: selection-stmt
Line : 4 Matched Rule used: fun-declaration
Line : 12 Matched Rule used: Comment
Line : 15 Matched Rule used: jump-stmt
Line : 14 Matched Rule used: compound-stmt
Line : 17 Matched Rule used: jump-stmt
Line : 16 Matched Rule used: compound-stmt
Line : 14 Matched Rule used: selection-stmt
Line : 13 Matched Rule used: fun-declaration
Line : 21 Matched Rule used: Comment
Line : 24 Matched Rule used: jump-stmt
Line : 23 Matched Rule used: compound-stmt
Line : 26 Matched Rule used: jump-stmt
Line : 25 Matched Rule used: compound-stmt
Line : 23 Matched Rule used: selection-stmt
Line : 22 Matched Rule used: fun-declaration
Line : 30 Matched Rule used: Comment
Line : 33 Matched Rule used: jump-stmt
Line : 32 Matched Rule used: compound-stmt
Line : 35 Matched Rule used: jump-stmt
Line : 34 Matched Rule used: compound-stmt
Line : 32 Matched Rule used: selection-stmt
Line : 31 Matched Rule used: fun-declaration
Line : 39 Matched Rule used: Comment
Line : 41 Matched Rule used: Comment
Line : 40 Matched Rule used: fun-declaration
Line : 45 Matched Rule used: Comment
Line : 46 Matched Rule used: struct-declaration
Line : 51 Matched Rule used: Comment
Line : 53 Matched Rule used: expression-stmt
Line : 54 Matched Rule used: expression-stmt
Line : 52 Matched Rule used: fun-declaration
Line : 1 Matched Rule used: Comment
Line : 6 Matched Rule used: Comment
Line : 7 Matched Rule used: include_command
Line : 9 Matched Rule used: Comment
Line : 10 Matched Rule used: var-declaration
Line : 11 Matched Rule used: var-declaration
Line : 12 Matched Rule used: var-declaration
Line : 13 Matched Rule used: var-declaration
Line : 14 Matched Rule used: var-declaration
Line : 15 Matched Rule used: var-declaration
Line : 17 Matched Rule used: Comment
Line : 18 Matched Rule used: struct-declaration
Line : 24 Matched Rule used: Comment
Line : 26 Matched Rule used: jump-stmt
Line : 25 Matched Rule used: fun-declaration
Line : 28 Matched Rule used: Comment
Line : 30 Matched Rule used: Comment
Line : 40 Matched Rule used: expression-stmt
Line : 42 Matched Rule used: expression-stmt
Line : 41 Matched Rule used: compound-stmt
Line : 44 Matched Rule used: expression-stmt
Line : 43 Matched Rule used: compound-stmt
Line : 41 Matched Rule used: selection-stmt
Line : 46 Matched Rule used: expression-stmt
Line : 48 Matched Rule used: expression-stmt
Line : 51 Matched Rule used: jump-stmt
Line : 50 Matched Rule used: compound-stmt
Line : 50 Matched Rule used: selection-stmt
Line : 47 Matched Rule used: compound-stmt
Line : 47 Matched Rule used: iteration-stmt
Line : 56 Matched Rule used: compound-stmt
Line : 56 Matched Rule used: selection-stmt
Line : 55 Matched Rule used: compound-stmt
Line : 55 Matched Rule used: iteration-stmt
Line : 61 Matched Rule used: expression-stmt
Line : 62 Matched Rule used: expression-stmt
Line : 63 Matched Rule used: expression-stmt
Line : 65 Matched Rule used: jump-stmt
Line : 29 Matched Rule used: fun-declaration
Total NO of errors: 0
